[
    {
        "id": "d54c48091323bea1",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "mqttBroker",
        "type": "mqtt-broker",
        "name": "local-mosquitto",
        "broker": "${MQTT_BROKER}",
        "port": "${MQTT_PORT}",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0345d5ea70398c50",
        "type": "mqtt-broker",
        "name": "meter-001-sim",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "grid/meter/meter-001/status",
        "birthQos": "1",
        "birthRetain": "true",
        "birthPayload": "online",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "grid/meter/meter-001/status",
        "willQos": "1",
        "willRetain": "true",
        "willPayload": "offline",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3e8c910706cdc66f",
        "type": "mqtt-broker",
        "name": "meter-002-sim",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "grid/meter/meter-002/status",
        "birthQos": "1",
        "birthRetain": "true",
        "birthPayload": "online",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "grid/meter/meter-002/status",
        "willQos": "1",
        "willRetain": "true",
        "willPayload": "offline",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5eca173c0a134c34",
        "type": "mqtt-broker",
        "name": "meter-003-sim",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "grid/meter/meter-003/status",
        "birthQos": "1",
        "birthRetain": "true",
        "birthPayload": "online",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "grid/meter/meter-003/status",
        "willQos": "1",
        "willRetain": "true",
        "willPayload": "offline",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "inject5s",
        "type": "inject",
        "z": "d54c48091323bea1",
        "name": "every 5s",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 1,
        "topic": "",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "makeReading"
            ]
        ]
    },
    {
        "id": "makeReading",
        "type": "function",
        "z": "d54c48091323bea1",
        "name": "Make meter reading (JSON)0.0.2",
        "func": "function mkReading(meterId) {\n    const ts = Date.now();\n    const Vbase = 230 + 2 * Math.sin(2 * Math.PI * ts / 60);\n    const Vnoise = (Math.random() - 0.5) * 0.2;\n    const V = Vbase + Vnoise\n    const Ibase = 5 + 0.4 * Math.sin(2 * Math.PI * ts / 37);\n    const Inoise = (Math.random() - 0.5) * 0.15\n    const I = Ibase + Inoise;\n    const P = (V * I) / 1000;\n    return {\n        topic: `grid/meter/${meterId}/telemetry`,\n        payload: { meterId, ts, voltage_V: +V.toFixed(2), current_A: +I.toFixed(3), power_kW: +P.toFixed(3) }\n    };\n}\nnode.send(mkReading(\"meter-001\"));\nreturn null;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 60,
        "wires": [
            [
                "mqttOut"
            ]
        ]
    },
    {
        "id": "mqttOut",
        "type": "mqtt out",
        "z": "d54c48091323bea1",
        "name": "Telemetry to MQTT1",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqttBroker",
        "x": 760,
        "y": 60,
        "wires": []
    },
    {
        "id": "mqttIn",
        "type": "mqtt in",
        "z": "d54c48091323bea1",
        "name": "subscribe all meters",
        "topic": "grid/meter/+/telemetry",
        "qos": "1",
        "datatype": "utf8",
        "broker": "mqttBroker",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 500,
        "wires": [
            [
                "jsonParse"
            ]
        ]
    },
    {
        "id": "jsonParse",
        "type": "json",
        "z": "d54c48091323bea1",
        "name": "to object",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 340,
        "y": 500,
        "wires": [
            [
                "toLineProtocol"
            ]
        ]
    },
    {
        "id": "toLineProtocol",
        "type": "function",
        "z": "d54c48091323bea1",
        "name": "to Influx Line Protocol + headers",
        "func": "// Read env passed via settings.js â†’ functionGlobalContext.env\n// const env = global.get('env') || {};\n// const influxUrl = (env.INFLUX_URL || 'http://influxdb:8086').replace(/\\/$/, '');\n// const org = env.INFLUX_ORG || 'scada-org';\n// const bucket = env.INFLUX_BUCKET || 'power';\n// const token = env.INFLUX_TOKEN || '';\nconst influxUrl = (env.get('INFLUX_URL') || 'http://influxdb:8086').replace(/\\/$/, '');\nconst org = env.get('INFLUX_ORG') || 'test';\nconst bucket = env.get('INFLUX_BUCKET') || 'raw_data';\nconst token = env.get('INFLUX_TOKEN') || '';\n\n\n// Build Influx Line Protocol from the MQTT JSON\nconst p = msg.payload || {};\nconst tsSec = Math.floor(((p.ts !== undefined ? p.ts : Date.now())) / 1000);\n\n// measurement=power, tag=meter_id, fields=voltage,current,power_kw, timestamp=seconds\nvar line =\n  'power,meter_id=' + p.meterId +\n  ' voltage_V=' + p.voltage_V +\n  ',current_A=' + p.current_A +\n  ',power_kW=' + p.power_kW +\n  ' ' + tsSec;\n\n// Prepare HTTP write to InfluxDB v2 API\nmsg.method = 'POST';\nmsg.url = influxUrl + '/api/v2/write?org=' + encodeURIComponent(org) +\n          '&bucket=' + encodeURIComponent(bucket) + '&precision=s';\nmsg.headers = {\n  Authorization: 'Token ' + token,\n  'Content-Type': 'text/plain; charset=utf-8'\n};\nmsg.payload = line;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 500,
        "wires": [
            [
                "httpWrite",
                "ad80dd9b28efbf33"
            ]
        ]
    },
    {
        "id": "httpWrite",
        "type": "http request",
        "z": "d54c48091323bea1",
        "name": "write to InfluxDB",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 880,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "debugLine",
        "type": "debug",
        "z": "d54c48091323bea1",
        "name": "line protocol preview",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 120,
        "wires": []
    },
    {
        "id": "debugStatus",
        "type": "debug",
        "z": "d54c48091323bea1",
        "name": "write status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "statusCode",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 40,
        "wires": []
    },
    {
        "id": "2532425d0f564c85",
        "type": "inject",
        "z": "d54c48091323bea1",
        "name": "every 5s",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 1,
        "topic": "",
        "x": 120,
        "y": 260,
        "wires": [
            [
                "0d34a0b50457e047"
            ]
        ]
    },
    {
        "id": "0d34a0b50457e047",
        "type": "function",
        "z": "d54c48091323bea1",
        "name": "Make meter reading (JSON)0.0.2",
        "func": "function mkReading(meterId) {\n    const ts = Date.now();\n    const Vbase = 230 + 2 * Math.sin(2 * Math.PI * ts / 60);\n    const Vnoise = (Math.random() - 0.5) * 0.2;\n    const V = Vbase + Vnoise\n    const Ibase = 5 + 0.4 * Math.sin(2 * Math.PI * ts / 37);\n    const Inoise = (Math.random() - 0.5) * 0.15\n    const I = Ibase + Inoise;\n    const P = (V * I) / 1000;\n    return {\n        topic: `grid/meter/${meterId}/telemetry`,\n        payload: { meterId, ts, voltage_V: +V.toFixed(2), current_A: +I.toFixed(3), power_kW: +P.toFixed(3) }\n    };\n}\nnode.send(mkReading(\"meter-002\"));\nnode.send(mkReading(\"meter-003\"));\nreturn null;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 260,
        "wires": [
            [
                "b9dc32c34ac71bc4"
            ]
        ]
    },
    {
        "id": "b9dc32c34ac71bc4",
        "type": "mqtt out",
        "z": "d54c48091323bea1",
        "name": "telemetry to MQTT2",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqttBroker",
        "x": 760,
        "y": 260,
        "wires": []
    },
    {
        "id": "ad80dd9b28efbf33",
        "type": "debug",
        "z": "d54c48091323bea1",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "jsonata",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 900,
        "y": 400,
        "wires": []
    }
]